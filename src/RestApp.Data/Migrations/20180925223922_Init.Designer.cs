// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RestApp.Data.Database;

namespace RestApp.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180925223922_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065");

            modelBuilder.Entity("RestApp.Data.Models.CharacterEpisodeModelDatabase", b =>
                {
                    b.Property<int>("CharacterId");

                    b.Property<int>("EpisodeId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("CharacterId", "EpisodeId");

                    b.HasIndex("EpisodeId");

                    b.ToTable("CharacterEpisode");

                    b.HasData(
                        new { CharacterId = 1, EpisodeId = 1 },
                        new { CharacterId = 1, EpisodeId = 2 },
                        new { CharacterId = 1, EpisodeId = 3 },
                        new { CharacterId = 2, EpisodeId = 1 },
                        new { CharacterId = 2, EpisodeId = 2 },
                        new { CharacterId = 2, EpisodeId = 3 },
                        new { CharacterId = 3, EpisodeId = 1 },
                        new { CharacterId = 3, EpisodeId = 2 },
                        new { CharacterId = 3, EpisodeId = 3 },
                        new { CharacterId = 4, EpisodeId = 1 },
                        new { CharacterId = 4, EpisodeId = 2 },
                        new { CharacterId = 4, EpisodeId = 3 },
                        new { CharacterId = 5, EpisodeId = 1 },
                        new { CharacterId = 6, EpisodeId = 1 },
                        new { CharacterId = 6, EpisodeId = 2 },
                        new { CharacterId = 6, EpisodeId = 3 },
                        new { CharacterId = 7, EpisodeId = 1 },
                        new { CharacterId = 7, EpisodeId = 2 },
                        new { CharacterId = 7, EpisodeId = 3 }
                    );
                });

            modelBuilder.Entity("RestApp.Data.Models.CharacterFriendModelDatabase", b =>
                {
                    b.Property<int>("CharacterId");

                    b.Property<int>("FriendId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("CharacterId", "FriendId");

                    b.HasIndex("FriendId");

                    b.ToTable("CharacterFriend");

                    b.HasData(
                        new { CharacterId = 1, FriendId = 3 },
                        new { CharacterId = 1, FriendId = 4 },
                        new { CharacterId = 1, FriendId = 6 },
                        new { CharacterId = 1, FriendId = 7 },
                        new { CharacterId = 2, FriendId = 5 },
                        new { CharacterId = 3, FriendId = 1 },
                        new { CharacterId = 3, FriendId = 4 },
                        new { CharacterId = 3, FriendId = 7 },
                        new { CharacterId = 4, FriendId = 1 },
                        new { CharacterId = 4, FriendId = 3 },
                        new { CharacterId = 4, FriendId = 6 },
                        new { CharacterId = 4, FriendId = 7 },
                        new { CharacterId = 5, FriendId = 2 },
                        new { CharacterId = 6, FriendId = 1 },
                        new { CharacterId = 6, FriendId = 3 },
                        new { CharacterId = 6, FriendId = 4 },
                        new { CharacterId = 6, FriendId = 7 },
                        new { CharacterId = 7, FriendId = 1 },
                        new { CharacterId = 7, FriendId = 3 },
                        new { CharacterId = 7, FriendId = 4 }
                    );
                });

            modelBuilder.Entity("RestApp.Data.Models.CharacterModelDatabase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Character");

                    b.HasData(
                        new { Id = 1, Name = "Luke Skywalker" },
                        new { Id = 2, Name = "Darth Vader" },
                        new { Id = 3, Name = "Han Solo" },
                        new { Id = 4, Name = "Leia Organa" },
                        new { Id = 5, Name = "Wilhuff Tarkin" },
                        new { Id = 6, Name = "C-3PO" },
                        new { Id = 7, Name = "R2-D2" }
                    );
                });

            modelBuilder.Entity("RestApp.Data.Models.EpisodeModelDatabase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Episode");

                    b.HasData(
                        new { Id = 1, Name = "NEWHOPE" },
                        new { Id = 2, Name = "EMPIRE" },
                        new { Id = 3, Name = "JEDI" }
                    );
                });

            modelBuilder.Entity("RestApp.Data.Models.CharacterEpisodeModelDatabase", b =>
                {
                    b.HasOne("RestApp.Data.Models.CharacterModelDatabase", "Character")
                        .WithMany("Episodes")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RestApp.Data.Models.EpisodeModelDatabase", "Episode")
                        .WithMany()
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RestApp.Data.Models.CharacterFriendModelDatabase", b =>
                {
                    b.HasOne("RestApp.Data.Models.CharacterModelDatabase", "Character")
                        .WithMany("Friends")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RestApp.Data.Models.CharacterModelDatabase", "Friend")
                        .WithMany()
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
